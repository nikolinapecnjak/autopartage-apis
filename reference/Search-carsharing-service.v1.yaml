openapi: 3.0.0
info:
  title: Search carsharing service
  version: '1.0'
  contact:
    email: nikolinapecnjak@gmail.com
    name: Nikolina Pecnjak
  description: This service allows us to search car sharing  services.
servers:
  - url: 'http://localhost:3000'
    description: Nikolina Pecnjak
paths:
  /carsharingService:
    get:
      tags:
        - autopartage
        - carsharing
      summary: Get cars available for carsharing according to the requester matching input parameters.
      description: 'It returns the list of CarsharingService objects administered by the requester and matching the input parameters. The response does not contain all the detailed information of the retrived cars, but just a subset of properties. All the query parameters are case insensitive.'
      operationId: getCarsharingServices
      parameters:
        - name: language
          in: query
          description: 'The language in which the content will be displayed, it is selected from the application. '
          required: false
          schema:
            type: string
          x-example: France
        - name: currency
          in: query
          description: 'The currency in which the prices will be displayed, it is selected from the application. The official ISO 4217 standard which specifies three-letter ("Alpha-3") codes is used.'
          required: false
          schema:
            type: string
          x-example: EUR
        - name: userLocation
          in: query
          description: Exact coordinates of the user.
          required: false
          schema:
            type: string
          x-example: France
        - name: country
          in: query
          description: The country where the carsharing service is being searched.
          required: false
          schema:
            type: string
          x-example: France
        - name: city
          in: query
          description: The city where the carsharing service is being searched.
          required: false
          schema:
            type: string
          x-example: Nice
        - name: zipcode
          in: query
          description: The zipcode of the city where the carsharing service is being searched.
          required: false
          schema:
            type: string
          x-example: 6160
        - name: fullAddress
          in: query
          description: The exact address for the wished location of car pickup.
          required: false
          schema:
            type: string
          x-example: '27 Albert Premier,06160 Antibes'
        - name: stationName
          in: query
          description: The exact address for the wished location of car pickup.
          required: false
          schema:
            type: string
          x-example: Nice Gare
        - name: startDate
          in: query
          description: 'The start date of the service following  RFC 3339 protocol conventions in the following format: YYYY-MM-DD. If omitted default value is current date at the time of the search. '
          required: true
          schema:
            type: string
          x-example: '2017-07-21'
        - name: startDateTime
          in: query
          description: 'The start date and time of the service following  RFC 3339 protocol conventions in following format: YYYY-MM-DDTHH:MM:SSZ. If omitted default value is current date-time at the time of the search. '
          required: true
          schema:
            type: string
          x-example: '2017-07-21T17:32:28Z'
        - name: carBrand
          in: query
          description: This parameter can be used for filtering results depending on the selected car brand.
          required: false
          schema:
            type: string
          x-example: BMW
        - name: carClass
          in: query
          description: This parameter can be used for filtering results depending on the selected car class.
          required: false
          schema:
            type: boolean
          x-example: A
        - name: isAutomatic
          in: query
          description: If true only automatic cars will be returned.
          required: false
          schema:
            type: boolean
        - name: isElectric
          in: query
          description: If true only electric cars will be returned.
          required: false
          schema:
            type: boolean
        - name: isThermal
          in: query
          description: If true only the cars with thermal engine will be returned.
          required: false
          schema:
            type: boolean
        - name: isisHybride
          in: query
          description: If true only the hybride cars will be returned.
          required: false
          schema:
            type: boolean
        - name: isHybridRechargeable
          in: query
          description: If true only the hybrid rechargeable cars will be returned.
          required: false
          schema:
            type: boolean
        - name: numberOfSeats
          in: query
          description: If specified only the cars with selected number of seats will be returned.
          required: false
          schema:
            type: integer
          x-example: 4
        - name: snowTires
          in: query
          description: If true only the the cars with snow tires will be returned.
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/CarsharingService.v1.yaml
              examples:
                Updated User Rebecca Baker:
                  value:
                    id: 13
                    firstName: Rebecca
                    lastName: Baker
                    email: rebecca@gmail.com
                    dateOfBirth: '1985-10-02'
                    emailVerified: false
                    createDate: '2019-08-24'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/error'            
        '401':
          description: Unauthorized. It basically stands for unauthenticated requests.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/error'
        '403':
          description: Forbidden. It basically stands for failing funcitional security checks.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/error'
components:
  schemas:
    warning:
      required:
        - code
        - title
      properties:
        code:
          type: integer
          description: 'A machine-readable error code from the Canned Messages table, that will enable the API Consumers code to handle this type of error'
        title:
          type: string
          description: An error title from the Canned Messages. This may be localized.
        detail:
          type: string
          description: 'An easy-to-read explanation specific to this occurrence of the problem. It should give the API consumer an idea of what went wrong and how to recover from it. Like the title, this fieldâ€™s value can be localized.'
        documentation:
          type: string
          format: url
          description: A link to a web page or file with further documentation to help the API consumer resolve this error
        warningType:
          type: string
          description: 'in case a canned message is returned, it could be an information message or a warning message. By default it is a warning unless sevirity is set to information.'
    error:
      required:
        - status
        - code
        - title
      properties:
        status:
          type: integer
          description: >-
            The [HTTP status
            code](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml)
            of this response. This is present only in terminal errors which cause
            an unsuccessful response. In the case of multiple errors, they must
            all have the same status.
        code:
          type: integer
          description: >-
            A machine-readable error code from the Amadeus Canned Messages table,
            that will enable the API Consumers code to handle this type of error
        title:
          type: string
          description: >-
            An error title from the Canned Messages table with a 1:1
            correspondence to the error code. This may be localized
        detail:
          type: string
          description: >-
            An easy-to-read explanation specific to this occurrence of the
            problem. It should give the API consumer an idea of what went wrong
            and how to recover from it. Like the title, this fieldâ€™s value can be
            localized.
        documentation:
          type: string
          format: url
          description: >-
            A link to a web page or file with further documentation to help the
            API consumer resolve this error
