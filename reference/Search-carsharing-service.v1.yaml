openapi: 3.0.0
info:
  title: Search carsharing service
  version: '1.0'
  contact:
    email: nikolinapecnjak@gmail.com
    name: Nikolina Pecnjak
  description: This service allows us to search car sharing  services.
servers:
  - url: 'http://localhost:3000'
    description: Nikolina Pecnjak
paths:
  /carsharingService:
    get:
      tags: [autopartage, carsharing]
      summary: Get cars available for carsharing according to the requester matching input parameters.
      description: 'It returns the list of CarsharingService objects administered by the requester and matching the input parameters. The response does not contain all the detailed information of the retrived cars, but just a subset of properties. All the query parameters are case insensitive.'
      operationId: getCarsharingServices
      parameters:
        - name: language
          in: query
          description: 'The language in which the content will be displayed, it is selected from the application. '
          required: false
          schema:
            type: string
          x-example: France
        - name: currency
          in: query
          description: 'The currency in which the prices will be displayed, it is selected from the application. The official ISO 4217 standard which specifies three-letter ("Alpha-3") codes is used.'
          required: false
          schema:
            type: string
          x-example: EUR
        - name: userLocation
          in: query
          description: Exact coordinates of the user.
          required: false
          schema:
            type: string
          x-example: France
        - name: country
          in: query
          description: The country where the carsharing service is being searched.
          required: false
          schema:
            type: string
          x-example: France
        - name: city
          in: query
          description: The city where the carsharing service is being searched.
          required: false
          schema:
            type: string
          x-example: Nice
        - name: zipcode
          in: query
          description: The zipcode of the city where the carsharing service is being searched.
          required: false
          schema:
            type: string
          x-example: 6160
        - name: fullAddress
          in: query
          description: The exact address for the wished location of car pickup.
          required: false
          schema:
            type: string
          x-example: '27 Albert Premier,06160 Antibes'
        - name: stationName
          in: query
          description: The exact address for the wished location of car pickup.
          required: false
          schema:
            type: string
          x-example: Nice Gare
        - name: startDate
          in: query
          description: 'The start date of the service following  RFC 3339 protocol conventions in the following format: YYYY-MM-DD. If omitted default value is current date at the time of the search. '
          required: true
          schema:
            type: string
          x-example: '2017-07-21'
        - name: startDateTime
          in: query
          description: 'The start date and time of the service following  RFC 3339 protocol conventions in following format: YYYY-MM-DDTHH:MM:SSZ. If omitted default value is current date-time at the time of the search. '
          required: true
          schema:
            type: string
          x-example: '2017-07-21T17:32:28Z'
        - name: carBrand
          in: query
          description: This parameter can be used for filtering results depending on the selected car brand.
          required: false
          schema:
            type: string
          x-example: BMW
        - name: carClass
          in: query
          description: This parameter can be used for filtering results depending on the selected car class.
          required: false
          schema:
            type: boolean
          x-example: A
        - name: isAutomatic
          in: query
          description: If true only automatic cars will be returned.
          required: false
          schema:
            type: boolean
        - name: isElectric
          in: query
          description: If true only electric cars will be returned.
          required: false
          schema:
            type: boolean
        - name: isThermal
          in: query
          description: If true only the cars with thermal engine will be returned.
          required: false
          schema:
            type: boolean
        - name: isisHybride
          in: query
          description: If true only the hybride cars will be returned.
          required: false
          schema:
            type: boolean
        - name: isHybridRechargeable
          in: query
          description: If true only the hybrid rechargeable cars will be returned.
          required: false
          schema:
            type: boolean
        - name: numberOfSeats
          in: query
          description: If specified only the cars with selected number of seats will be returned.
          required: false
          schema:
            type: integer
          x-example: 4
        - name: snowTires
          in: query
          description: If true only the the cars with snow tires will be returned.
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                $ref: '#/'
              examples:
                Get User Alice Smith:
                  value:
                    id: 142
                    firstName: Alice
                    lastName: Smith
                    email: alice.smith@gmail.com
                    dateOfBirth: '1997-10-31'
                    emailVerified: true
                    signUpDate: '2019-08-24'
        '404':
          description: User Not Found
components:
  schemas: null
