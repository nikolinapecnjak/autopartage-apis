openapi: 3.0.0
info:
  title: Search carsharing service
  version: '1.0'
  contact:
    email: nikolinapecnjak@gmail.com
    name: Nikolina Pecnjak
  description: This service allows us to search car sharing  services.
servers:
  - url: 'http://localhost:3000'
    description: Nikolina Pecnjak
paths:
  /carsharingService:
    get:
      tags:
        - autopartage
        - carsharing
      summary: Get cars available for carsharing according to the requester matching input parameters.
      description: 'It returns the list of CarsharingService objects administered by the requester and matching the input parameters. The response does not contain all the detailed information of the retrived cars, but just a subset of properties. All the query parameters are case insensitive.'
      operationId: getCarsharingServices
      parameters:
        - name: language
          in: query
          description: 'The language in which the content will be displayed, it is selected from the application. ISO 639-2 Code is used.'
          required: false
          schema:
            type: string
            example: hrv
        - name: currency
          in: query
          description: 'The name of the currency in which the prices will be displayed, it is selected from the application. The official ISO 4217 standard which specifies three-letter ("Alpha-3") codes is used.'
          required: false
          schema:
            type: string
            example: EUR
          x-example: EUR
        - name: userCurrentLocation
          in: query
          description: If set to true the exact user location will be used to find the closest available cars.
          required: false
          schema:
            type: boolean
        - name: country
          in: query
          description: The full name of the country where the carsharing service is being searched.
          required: false
          schema:
            type: string
            example: France
          x-example: France
        - name: city
          in: query
          description: The city where the carsharing service is being searched.
          required: false
          schema:
            type: string
            example: Nice
          x-example: Nice
        - name: zipcode
          in: query
          description: The zipcode of the city where the carsharing service is being searched.
          required: false
          schema:
            type: string
            example: '06100'
          x-example: 6160
        - name: fullAddress
          in: query
          description: The full address for the wished location of car pickup.
          required: false
          schema:
            type: string
            example: 1er Albert Premier
          x-example: '27 Albert Premier,06160 Antibes'
        - name: stationName
          in: query
          description: 'The exact location name for the wished location of car pickup. It can be for example airport name, parking name or station name.'
          required: false
          schema:
            type: string
            example: Gare de Nice-Ville
          x-example: Nice Gare
        - name: startDate
          in: query
          description: 'The start date of the service following  RFC 3339 protocol conventions in the following format: YYYY-MM-DD. If omitted default value is current date at the time of the search. '
          required: true
          schema:
            type: string
            example: '2021-07-21'
            format: date
          x-example: '2017-07-21'
        - name: startDateTime
          in: query
          description: 'The start date and time of the service following  RFC 3339 protocol conventions in following format: YYYY-MM-DDTHH:MM:SSZ. If omitted default value is current date-time at the time of the search. '
          required: true
          schema:
            type: string
            format: date-time
          x-example: '2017-07-21T17:32:28Z'
        - name: carBrand
          in: query
          description: This parameter can be used for filtering results depending on the selected car brand.
          required: false
          schema:
            type: string
            example: BMW
          x-example: BMW
        - name: carClass
          in: query
          description: This parameter can be used for filtering results depending on the selected car class. Car classes should be listed in enum field.
          required: false
          schema:
            type: string
            example: A
          x-example: A
        - name: isAutomatic
          in: query
          description: If true only automatic cars will be returned.
          required: false
          schema:
            type: boolean
        - name: isElectric
          in: query
          description: If true only electric cars will be returned.
          required: false
          schema:
            type: boolean
        - name: isThermal
          in: query
          description: If true only the cars with thermal engine will be returned.
          required: false
          schema:
            type: boolean
        - name: isisHybride
          in: query
          description: If true only the hybride cars will be returned.
          required: false
          schema:
            type: boolean
        - name: isHybridRechargeable
          in: query
          description: If true only the hybrid rechargeable cars will be returned.
          required: false
          schema:
            type: boolean
        - name: numberOfSeats
          in: query
          description: If specified only the cars with selected number of seats will be returned.
          required: false
          schema:
            type: integer
            enum:
              - 1
              - 2
              - 3
              - 4
              - 5
              - 6
              - 7
            example: 4
          x-example: 4
        - name: snowTires
          in: query
          description: If true only the the cars with snow tires will be returned.
          required: false
          schema:
            type: boolean
        - name: bookNow
          schema:
            type: boolean
          in: query
          description: If true the startDateTime is set to the current local time which applies in the country that is selected for the search..
          required: false
        - name: contractCode
          schema:
            type: string
            example: 123FGH453
          in: query
          description: Represents the code of autopartage reservation done through another service such as a Hotel provider.
        - schema:
            type: number
            format: double
            example: 43.575847
          in: query
          name: userXCoordinate
          description: Applicable only if userCurrentLocation parameter is true. Represents the X coordinate of current user location.
        - schema:
            type: number
            format: double
            example: 7.120708
          in: query
          name: userYCoordinate
          description: Applicable only if userCurrentLocation parameter is true. Represents the Y coordinate of current user location.
        - name: endDate
          schema:
            type: string
            example: '2021-07-22'
            format: date
          in: query
          description: 'The end date of the service following  RFC 3339 protocol conventions in the following format: YYYY-MM-DD.'
        - name: endDateTime
          schema:
            type: string
            format: date-time
            example: '2021-07-22T17:32:28Z'
          in: query
          description: 'The end date and time of the service following  RFC 3339 protocol conventions in following format: YYYY-MM-DDTHH:MM:SSZ.'
        - name: fields
          schema:
            type: array
            items:
              type: string
          in: query
          description: 'List of fields to be returned. If omitted, all      available fields are returned. If specified, only the requested fields are returned.'
          style: pipeDelimited
      responses:
        '200':
          description: Cars for
          content:
            application/json:
              schema:
                type: array
                uniqueItems: false
                items:
                  $ref: '#/components/schemas/CarsharingService'
              examples:
                example-1:
                  value:
                    - id: string
                      car:
                        id: string
                        location:
                          id: string
                          country: France
                          city: Nice
                          zipCode: 6100
                          fullAddress: 1er Albert Premier
                          stationName: Gare de Nice-Ville
                          description: train station
                          isAirport: true
                          kmDistanceFromSelectedLocation: 1.5
                          xCoordinate: 43.575847
                          yCoordinate: 7.120708
                        carBrand: BMW
                        carModel: Fiat
                        fuelOrBatteryLevel: 70%
                        numberOfSeats: '4'
                        isAutomatic: true
                        isCabriolet: true
                        isElectric: true
                        isThermal: true
                        isHybrid: true
                        isHybridRechargeable: true
                        description: 'Equiped with climatisation and snow tires. '
                        fuelType: diesel
                        fuelCardIncluded: true
                        airConditioning: true
                        gps: true
                        snowTires: true
                        speedRegulator: true
                        halfAutonomyLevel: true
                        kilometersLeft: 1500
                        carClass: S
                        platesNumber: FW228GZ
                        carYear: 2017
                        kilometersPassed: 50000
                      startDate:
                        id: string
                        date: '2017-07-21'
                        dateTime: '2017-07-21T17:32:28Z'
                      returnDate:
                        id: string
                        date: '2017-07-21'
                        dateTime: '2017-07-21T17:32:28Z'
                      pricing:
                        id: string
                        totalServicePrice: '100'
                        contractCode: '12345'
                        kilometerPrice: '1'
                        hourPrice: '10'
                        minutePrice: '0.50'
                        dayPrice: '100'
                        currency: EUR
        '201':
          description: Created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized. It basically stands for unauthenticated requests.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/error'
        '403':
          description: Forbidden. It basically stands for failing funcitional security checks.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/error'
components:
  schemas:
    warning:
      required:
        - code
        - title
      properties:
        code:
          type: integer
          description: 'A machine-readable error code, that will enable the API Consumers to handle this type of error'
        title:
          type: string
          description: An error title. It can be localized.
        detail:
          type: string
          description: 'An easy-to-read explanation specific to this occurrence of the problem. It should give the API consumer an idea of what went wrong and how to recover from it. Like the title, this fields value can be localized.'
        documentation:
          type: string
          format: url
          description: A link to a web page or file with further documentation to help the API consumer resolve this error
        warningType:
          type: string
          description: The type could be an information message or a warning message. By default it is a warning unless sevirity is set to information.
    error:
      required:
        - status
        - code
        - title
      properties:
        status:
          type: integer
          description: 'The [HTTP status code](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) of this response. This is present only in terminal errors which cause an unsuccessful response. In the case of multiple errors, they must all have the same status.'
        code:
          type: integer
          description: A machine-readable error code from the error table that will enable the API Consumers to handle this type of error
        title:
          type: string
          description: 'An error title from the error table with a 1:1 correspondence to the error code. This may be localized.'
        detail:
          type: string
          description: 'An easy-to-read explanation specific to this occurrence of the problem. It should give the API consumer an idea of what went wrong and how to recover from it. Like the title, this fields value can be localized.'
        documentation:
          type: string
          format: url
          description: A link to a web page or file with further documentation to help the API consumer resolve this error
    Location:
      type: object
      description: Location representing the start or end location for the rental and return of the car.
      x-examples:
        example-1:
          id: string
          country: France
          city: Nice
          zipCode: 6100
          fullAddress: 1er Albert Premier
          stationName: Gare de Nice-Ville
          description: train station
          isAirport: true
          kmDistanceFromSelectedLocation: 1.5
          xCoordinate: 43.575847
          yCoordinate: 7.120708
      properties:
        id:
          type: string
        country:
          type: string
          description: Full name of the country.
          example: France
        city:
          type: string
          description: Full name of the city.
          example: Nice
        zipCode:
          type: integer
          description: Zip code of the station.
          example: 6100
        fullAddress:
          type: string
          description: Full address name defining the target pickup station or defining the central base for searching the pickup station in the radius.
          example: 1er Albert Premier
        stationName:
          type: string
          description: Full name of the station.
          example: Gare de Nice-Ville
        description:
          type: string
          description: Additional information about the location.
          example: train station
        isAirport:
          type: boolean
          description: If true the selected location is  Airport.
        kmDistanceFromSelectedLocation:
          type: number
          description: 'If the initialy selected/searched location does not have available cars, among the returned locations there will be all the locations that are nearby the initialy selected one. This parameter defines the distance in kilometers from the initialy chosen location.'
          format: float
          example: 1.5
        xCoordinate:
          type: number
          format: double
          description: x coordinate of the Location
          example: 43.575847
        yCoordinate:
          type: number
          format: double
          description: y coordinate of the Location
          example: 7.120708
    DateTime:
      title: DateTime
      type: object
      description: Representing the date and the time.
      x-examples:
        example-1:
          id: string
          date: '2017-07-21'
          dateTime: '2017-07-21T17:32:28Z'
      properties:
        id:
          type: string
        date:
          type: string
          format: date
          example: '2017-07-21'
        dateTime:
          type: string
          format: date-time
          example: '2017-07-21T17:32:28Z'
    Car:
      type: object
      x-tags:
        - voiture
        - car
      description: Car being rented for the carsharing service.
      x-examples:
        example-1:
          id: string
          location:
            id: string
            country: France
            city: Nice
            zipCode: 6100
            fullAddress: 1er Albert Premier
            stationName: Gare de Nice-Ville
            description: train station
            isAirport: true
            kmDistanceFromSelectedLocation: 1.5
            xCoordinate: 43.575847
            yCoordinate: 7.120708
          carBrand: BMW
          carModel: Fiat
          fuelOrBatteryLevel: 70%
          numberOfSeats: '4'
          isAutomatic: true
          isCabriolet: true
          isElectric: true
          isThermal: true
          isHybrid: true
          isHybridRechargeable: true
          description: 'Equiped with climatisation and snow tires. '
          fuelType: diesel
          fuelCardIncluded: true
          airConditioning: true
          gps: true
          snowTires: true
          speedRegulator: true
          halfAutonomyLevel: true
          kilometersLeft: 1500
          carClass: S
          platesNumber: FW228GZ
          carYear: 2017
          kilometersPassed: 50000
      properties:
        id:
          type: string
        location:
          $ref: '#/components/schemas/Location'
        carBrand:
          type: string
          example: BMW
          description: Car brand
        carModel:
          type: string
          description: Car Model
          example: Fiat
        fuelOrBatteryLevel:
          description: 'Depending on weather the car is electric or not, it represents the amount of available fuel or battery in percentage.'
          example: 70%
          type: string
        numberOfSeats:
          type: string
          description: Number of seats available  in the car.
          enum:
            - '1'
            - '2'
            - '3'
            - '4'
            - '5'
            - '6'
            - '7'
          example: '4'
        isAutomatic:
          type: boolean
          description: If true car is automatic.
        isCabriolet:
          type: boolean
          description: If true car is cabriolet.
        isElectric:
          type: boolean
          description: If true car is electric.
        isThermal:
          type: boolean
          description: If true car is thermal (bensin or diesel engine).
        isHybrid:
          type: boolean
          description: If true car is hybrid.
        isHybridRechargeable:
          type: boolean
          description: If true car is hybrid wit rechargeable battery.
        description:
          type: string
          description: |-
            Includes additional information about the car.
            Other additional equipement can be specified here.
          example: 'Equiped with climatisation and snow tires. '
        fuelType:
          type: string
          enum:
            - diesel
            - petrol
          example: diesel
          description: Determines the type of fuel in case if car has a thermal engine. Not applicable if car does not have a thermal engine.
        fuelCardIncluded:
          type: boolean
          description: If true the company fuel card is available in the car for the purpose of tanking at the partner gas stations.
        airConditioning:
          type: boolean
          description: If true the car has air conditioning.
        gps:
          type: boolean
          description: If true the car has gps.
        snowTires:
          type: boolean
          description: If true the car has snow tires.
        speedRegulator:
          description: If true the car has the speed regulator.
          type: boolean
        halfAutonomyLevel:
          description: If true the car has half autonomy level.
          type: boolean
        kilometersLeft:
          type: integer
          description: According to the percentage of fuel/battery it defines how much kilometers can be passed before charging/tanking.
          example: 1500
        carClass:
          type: string
          description: |-
            Determines the class of the car. For example:
            S - small
            M - medium
            L - large
          example: S
          enum:
            - S
            - M
            - L
        platesNumber:
          type: string
          example: FW228GZ
          description: The car plates number.
        carYear:
          type: integer
          description: The year of car production.
          example: 2017
        kilometersPassed:
          type: integer
          description: The number of kilometers the car has passed by now.
          example: 50000
      required:
        - id
        - carModel
        - fuelOrBatteryLevel
        - numberOfSeats
    Pricing:
      title: Pricing
      type: object
      x-examples:
        example-1:
          id: string
          totalServicePrice: '100'
          contractCode: '12345'
          kilometerPrice: '1'
          hourPrice: '10'
          minutePrice: '0.50'
          dayPrice: '100'
          currency: EUR
      properties:
        id:
          type: string
        totalServicePrice:
          type: string
          example: '100'
          description: |-
            Total amount of the autopartage service including car  price and all the selected additional services if applicable.
            If selected at booking time, it includes also any additional autopartage options costs such as Plus/Premium insurance, airportParking, additional car equipement, additional Driver or additional mileage.
            The calculation depends on how the business calculates the pricing
            If not specified in the request default currency is EUR.
            This is the final price displayed to the customer.
        contractCode:
          type: string
          default: 'null'
          description: Represents the code of autopartage reservation done through another service such as a Hotel provider. In case if there is a valid contract code the total price is zero since the service was previously payed.
          example: '12345'
        kilometerPrice:
          type: string
          description: |-
            The price per kilometer. Applicable if corresponding package is chosen.
            The currency depends on the chosen currency in the accoutn of the user.
          example: '1'
        hourPrice:
          type: string
          description: |-
            The price per hour. Applicable if corresponding package is chosen.
            The currency depends on the chosen currency in the accoutn of the user.
          example: '10'
        minutePrice:
          type: string
          description: |-
            The price per minute. Applicable if corresponding package is chosen.
            The currency depends on the chosen currency in the accoutn of the user.
          example: '0.50'
        dayPrice:
          type: string
          description: |-
            The price per day. Applicable if corresponding package is chosen.
            The currency depends on the chosen currency in the accoutn of the user.
          example: '100'
        currency:
          type: string
          description: 'The currency in which the prices will be displayed, it is selected from the application. The official ISO 4217 standard which specifies three-letter ("Alpha-3") codes is used.'
          example: EUR
    CarsharingService:
      title: CarSharingService
      type: object
      description: ''
      x-examples:
        example-1:
          id: string
          car:
            id: string
            location:
              id: string
              country: France
              city: Nice
              zipCode: 6100
              fullAddress: 1er Albert Premier
              stationName: Gare de Nice-Ville
              description: train station
              isAirport: true
              kmDistanceFromSelectedLocation: 1.5
              xCoordinate: 43.575847
              yCoordinate: 7.120708
            carBrand: BMW
            carModel: Fiat
            fuelOrBatteryLevel: 70%
            numberOfSeats: '4'
            isAutomatic: true
            isCabriolet: true
            isElectric: true
            isThermal: true
            isHybrid: true
            isHybridRechargeable: true
            description: 'Equiped with climatisation and snow tires. '
            fuelType: diesel
            fuelCardIncluded: true
            airConditioning: true
            gps: true
            snowTires: true
            speedRegulator: true
            halfAutonomyLevel: true
            kilometersLeft: 1500
            carClass: S
            platesNumber: FW228GZ
            carYear: 2017
            kilometersPassed: 50000
          startDate:
            id: string
            date: '2017-07-21'
            dateTime: '2017-07-21T17:32:28Z'
          returnDate:
            id: string
            date: '2017-07-21'
            dateTime: '2017-07-21T17:32:28Z'
          pricing:
            id: string
            totalServicePrice: '100'
            contractCode: '12345'
            kilometerPrice: '1'
            hourPrice: '10'
            minutePrice: '0.50'
            dayPrice: '100'
            currency: EUR
      properties:
        id:
          type: string
          description: |
            Unique identifier of AutopartageService object
        car:
          $ref: '#/components/schemas/Car'
        startDate:
          $ref: '#/components/schemas/DateTime'
        returnDate:
          $ref: '#/components/schemas/DateTime'
        pricing:
          $ref: '#/components/schemas/Pricing'
