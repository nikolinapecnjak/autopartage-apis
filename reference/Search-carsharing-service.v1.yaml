openapi: 3.0.0
info:
  title: Carsharing service (Autopartage)
  version: '1.0'
  contact:
    email: nikolinapecnjak@gmail.com
    name: Nikolina Pecnjak
  description: This service allows us to search car sharing  services.
servers:
  - url: 'http://localhost:3000'
    description: Nikolina Pecnjak
paths:
  /carsharing/cars:
    get:
      tags:
        - autopartage
        - carsharing
      summary: Search cars available for carsharing according to the requester matching input parameters.
      description: 'It returns an array of CarsharingService objects matching the input parameters. The response does not contain all the detailed information of the retrived cars, but just a subset of properties. All the query parameters are case insensitive.'
      operationId: getCarsharingServices
      parameters:
        - name: language
          in: query
          description: The language in which the content will be displayed.It can be previously selected from the application. ISO 639-2 3-letter Code is used.
          required: false
          schema:
            type: string
            example: eng
            default: eng
        - name: currency
          in: query
          description: The name of the currency in which the prices will be displayed. It can be previously selected from the application. The official ISO 4217 standard which specifies three-letter ("Alpha-3") codes is used.
          schema:
            type: string
            example: EUR
            default: EUR
          x-example: EUR
        - name: country
          in: query
          description: The full name of the country where the carsharing service is being searched.
          schema:
            type: string
            example: France
          x-example: France
        - name: city
          in: query
          description: The city where the carsharing service is being searched.
          required: false
          schema:
            type: string
            example: Nice
          x-example: Nice
        - name: fullAddress
          in: query
          description: 'The address for the wished location of car pickup. It is needed to select also zipCode,city and country in order to uniquely identify the address. '
          required: false
          schema:
            type: string
            example: 4 Rue Raoul Bosio
          x-example: '27 Albert Premier,06160 Antibes'
        - name: stationName
          in: query
          description: 'The station name for the wished location of car pickup. It can be for example airport name, parking name or train station name.The station name needs to be one of the registered carsharing stations.'
          required: false
          schema:
            type: string
            example: Gare de Nice-Ville
          x-example: Nice Gare
        - name: startDate
          in: query
          description: 'The start date of the service following  RFC 3339 protocol conventions in the following format: YYYY-MM-DD. If omitted default value is current date at the time of the search. '
          schema:
            type: string
            example: '2021-07-21'
            format: date
          x-example: '2017-07-21'
        - name: startDateTime
          in: query
          description: 'The start date and time of the service. The format is following  RFC 3339 protocol conventions: YYYY-MM-DDTHH:MM:SSZ.'
          schema:
            type: string
            format: date-time
          x-example: '2017-07-21T17:32:28Z'
        - name: carBrand
          in: query
          description: This parameter can be used for filtering results depending on the selected car brand.
          required: false
          schema:
            type: string
            example: BMW
          x-example: BMW
        - name: carClass
          in: query
          description: This parameter can be used for filtering results depending on the selected car class. Available car classes should be listed in enum field.
          required: false
          schema:
            type: string
            example: A
          x-example: A
        - name: numberOfSeats
          in: query
          description: If specified only the cars with selected number of seats will be returned.
          required: false
          schema:
            type: integer
            enum:
              - 2
              - 4
              - 5
              - 6
              - 7
            example: 4
          x-example: 4
        - name: snowTires
          in: query
          description: If true only the the cars with snow tires will be returned.
          required: false
          schema:
            type: boolean
        - schema:
            type: number
            format: double
            example: 43.575847
          in: query
          name: userXCoordinate
          description: Represents the X coordinate of current user location. Together with Y coordinate determines the location of the user.
        - schema:
            type: number
            format: double
            example: 7.120708
          in: query
          name: userYCoordinate
          description: Represents the Y coordinate of current user location.Together with X coordinate determines the location of the user.
        - name: endDate
          schema:
            type: string
            example: '2021-07-22'
            format: date
          in: query
          description: 'The chosen end date of the carsharing service following  RFC 3339 protocol conventions in the following format: YYYY-MM-DD.'
        - name: endDateTime
          schema:
            type: string
            format: date-time
            example: '2021-07-22T17:32:28Z'
          in: query
          description: 'The chosen end date and time of the carsharing service. The format is following  RFC 3339 protocol conventions: YYYY-MM-DDTHH:MM:SSZ.'
        - name: fields
          schema:
            type: array
            items:
              type: string
          in: query
          description: 'List of fields to be returned. If omitted, all available fields are returned. If specified, only the requested fields are returned.'
          style: pipeDelimited
        - schema:
            type: string
            example: '06160'
          in: query
          name: zipCode
          description: Zipcode of the town where car is searched
        - schema:
            type: integer
            example: 50
            default: 10
          in: query
          name: radius
          description: Radius from current location in which the cars will be searched. Unit is kilometers. This parameter is applicable if the search is done according to selected address or according to  user coordinates.
        - schema:
            type: string
            enum:
              - automatic
              - manual
              - all
          in: query
          name: transmission
          description: The type of transmission in the car.
        - schema:
            type: string
            enum:
              - hybrid
              - hybridRechargeable
              - thermal
              - electric
              - all
          in: query
          name: energy
          description: The type of energy in the car.
        - schema:
            type: string
          in: query
          name: startTime
          description: 'The chosen start time of the carsharing service in the following format HH:MM:SS'
        - schema:
            type: string
          in: query
          name: endTime
          description: 'The chosen end time of the carsharing service in the following format HH:MM:SS'
      responses:
        '200':
          description: Available cars successfully retrieved.
          content:
            application/json:
              schema:
                title: Available cars
                type: array
                uniqueItems: false
                items:
                  $ref: '#/components/schemas/Car'
              examples:
                example-1:
                  value:
                    - id: string
                      location:
                        id: string
                        country: France
                        city: Nice
                        zipCode: 6100
                        fullAddress: 1er Albert Premier
                        stationName: Gare de Nice-Ville
                        description: train station
                        isAirport: false
                        kmDistanceFromSelectedLocation: 1.5
                        xCoordinate: 43.575847
                        yCoordinate: 7.120708
                      carBrand: BMW
                      carModel: BMW 5
                      fuelOrBatteryLevel: 70%
                      numberOfSeats: '4'
                      description: 'Equiped with climatisation and snow tires. '
                      fuelType: diesel
                      fuelCardIncluded: false
                      airConditioning: true
                      gps: true
                      snowTires: true
                      speedRegulator: true
                      halfAutonomyLevel: true
                      kilometersLeft: 1500
                      carClass: S
                      platesNumber: FW228GZ
                      carYear: 2017
                      kilometersPassed: 50000
                      kilometerPrice: 1
                      hourPrice: 10
                      minutePrice: 0.5
                      dayPrice: 100
                      transmission: manual
                      energy: thermal
                      carType: ''
                      currencyCode: EUR
        '204':
          description: No Content.
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized. It basically stands for unauthenticated requests.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/error'
        '403':
          description: Forbidden. It basically stands for failing funcitional security checks.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/error'
    parameters: []
components:
  schemas:
    warning:
      required:
        - code
        - title
      properties:
        code:
          type: integer
          description: 'A machine-readable error code, that will enable the API Consumers to handle this type of error'
        title:
          type: string
          description: An error title. It can be localized.
        detail:
          type: string
          description: 'An easy-to-read explanation specific to this occurrence of the problem. It should give the API consumer an idea of what went wrong and how to recover from it. Like the title, this fields value can be localized.'
        documentation:
          type: string
          format: url
          description: A link to a web page or file with further documentation to help the API consumer resolve this error
        warningType:
          type: string
          description: The type could be an information message or a warning message. By default it is a warning unless sevirity is set to information.
    error:
      required:
        - status
        - code
        - title
      properties:
        status:
          type: integer
          description: 'The [HTTP status code](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) of this response. This is present only in terminal errors which cause an unsuccessful response. In the case of multiple errors, they must all have the same status.'
        code:
          type: integer
          description: A machine-readable error code from the error table that will enable the API Consumers to handle this type of error
        title:
          type: string
          description: 'An error title from the error table with a 1:1 correspondence to the error code. This may be localized.'
        detail:
          type: string
          description: 'An easy-to-read explanation specific to this occurrence of the problem. It should give the API consumer an idea of what went wrong and how to recover from it. Like the title, this fields value can be localized.'
        documentation:
          type: string
          format: url
          description: A link to a web page or file with further documentation to help the API consumer resolve this error
    Location:
      type: object
      description: Location representing the start or end location for the rental and return of the car.
      x-examples:
        example-1:
          id: string
          country: France
          city: Nice
          zipCode: 6100
          fullAddress: 1er Albert Premier
          stationName: Gare de Nice-Ville
          description: train station
          isAirport: true
          kmDistanceFromSelectedLocation: 1.5
          xCoordinate: 43.575847
          yCoordinate: 7.120708
      properties:
        id:
          type: string
        country:
          type: string
          description: Full name of the country.
          example: France
        city:
          type: string
          description: Full name of the city.
          example: Nice
        zipCode:
          type: integer
          description: Zip code of the station.
          example: 6100
        fullAddress:
          type: string
          description: Full address name defining the target pickup station or defining the central base for searching the pickup station in the radius.
          example: 1er Albert Premier
        stationName:
          type: string
          description: Full name of the station.
          example: Gare de Nice-Ville
        description:
          type: string
          description: Additional information about the location.
          example: train station
        isAirport:
          type: boolean
          description: If true the selected location is  Airport.
        kmDistanceFromSelectedLocation:
          type: number
          description: 'If the initialy selected/searched location does not have available cars, among the returned locations there will be all the locations that are nearby the initialy selected one. This parameter defines the distance in kilometers from the initialy chosen location.'
          format: float
          example: 1.5
        xCoordinate:
          type: number
          format: double
          description: x coordinate of the Location
          example: 43.575847
        yCoordinate:
          type: number
          format: double
          description: y coordinate of the Location
          example: 7.120708
      required:
        - id
        - country
        - city
        - zipCode
        - fullAddress
        - stationName
    DateTime:
      title: DateTime
      type: object
      description: Representing the date and the time.
      x-examples:
        example-1:
          id: string
          date: '2017-07-21'
          dateTime: '2017-07-21T17:32:28Z'
      properties:
        id:
          type: string
        date:
          type: string
          format: date
          example: '2021-07-21'
        dateTime:
          type: string
          format: date-time
          example: '2021-07-21T17:32:28Z'
        time:
          type: string
          format: time
          example: '17:32:28'
    Car:
      title: Car
      type: object
      x-tags:
        - voiture
        - car
      description: 'Car available for the rent through the carsharing service. Except required parameters it is mandatory to return one of the prices. It depends on the business model which type of pricing is used and which parameter should be returned. It can be specified in the request ''fields'' parameters which parameters should be returned. It is possible to have daily pricing, hourly pricing, pricing per minute and pricing per kilometer.'
      x-examples:
        example-1:
          id: string
          location:
            id: string
            country: France
            city: Nice
            zipCode: 6100
            fullAddress: 1er Albert Premier
            stationName: Gare de Nice-Ville
            description: train station
            isAirport: true
            kmDistanceFromSelectedLocation: 1.5
            xCoordinate: 43.575847
            yCoordinate: 7.120708
          carBrand: BMW
          carModel: BMW 5
          fuelOrBatteryLevel: 70%
          numberOfSeats: '4'
          description: 'Equiped with climatisation and snow tires. '
          fuelType: diesel
          fuelCardIncluded: true
          airConditioning: true
          gps: true
          snowTires: true
          speedRegulator: true
          halfAutonomyLevel: true
          kilometersLeft: 1500
          carClass: S
          platesNumber: FW228GZ
          carYear: 2017
          kilometersPassed: 50000
          kilometerPrice: '1'
          hourPrice: '10'
          minutePrice: '0.50'
          dayPrice: '100'
          transmission: manual
          energy: thermal
          carType: ''
          currencyCode: EUR
      properties:
        id:
          type: string
        location:
          $ref: '#/components/schemas/Location'
        carBrand:
          type: string
          example: BMW
          description: Car brand
        carModel:
          type: string
          description: Car Model
          example: 'BMW 5 '
        fuelOrBatteryLevel:
          description: 'Depending on weather the car is electric or not, it represents the amount of available fuel or battery in percentage.'
          example: 70%
          type: string
        numberOfSeats:
          type: string
          description: Number of seats available  in the car.
          enum:
            - '1'
            - '2'
            - '3'
            - '4'
            - '5'
            - '6'
            - '7'
          example: '4'
        description:
          type: string
          description: |-
            Includes additional information about the car.
            Other additional equipement can be specified here.
          example: 'Equiped with climatisation and snow tires. '
        fuelType:
          type: string
          enum:
            - diesel
            - petrol
          example: diesel
          description: Determines the type of fuel in case if car has a thermal engine. This parameter is ignored if car does not have a thermal energy.
        fuelCardIncluded:
          type: boolean
          description: If true the company fuel card is available in the car for the purpose of tanking at the partner gas stations.
        airConditioning:
          type: boolean
          description: If true the car has air conditioning.
        gps:
          type: boolean
          description: If true the car has gps.
        snowTires:
          type: boolean
          description: If true the car has snow tires.
        speedRegulator:
          description: If true the car has the speed regulator.
          type: boolean
        halfAutonomyLevel:
          description: If true the car has half autonomy level.
          type: boolean
        kilometersLeft:
          type: number
          description: According to the percentage of fuel/battery it defines how much kilometers can be passed before charging/tanking.
          example: 1500
          format: double
        carClass:
          type: string
          description: |-
            Determines the class of the car. Depends on the defined business model within the carsharing company.
            For example:
            S - small
            M - medium
            L - large
          example: S
          enum:
            - S
            - M
            - L
        platesNumber:
          type: string
          example: FW228GZ
          description: The car plates number.
        carYear:
          type: integer
          description: The year of car production.
          example: 2017
        kilometersPassed:
          type: number
          description: The number of kilometers the car has passed by now.
          example: 50000
          format: double
        kilometerPrice:
          type: number
          description: |-
            The price per kilometer. Applicable if corresponding package is chosen.
            The currency depends on the chosen currency in the accoutn of the user.
          example: 1
          format: double
        hourPrice:
          type: number
          description: |-
            The price per hour. Applicable if corresponding package is chosen.
            The currency depends on the chosen currency in the accoutn of the user.
          example: 10
          format: double
        minutePrice:
          type: number
          description: |-
            The price per minute. Applicable if corresponding package is chosen.
            The currency depends on the chosen currency in the accoutn of the user.
          example: 0.5
          format: double
        dayPrice:
          type: number
          description: |-
            The price per day. Applicable if corresponding package is chosen.
            The currency depends on the chosen currency in the accoutn of the user.
          example: 100
          format: double
        transmission:
          type: string
          description: The type of transmission in the car.
          enum:
            - automatic
            - manual
          example: manual
        energy:
          type: string
          description: The type of energy in the car.
          enum:
            - thermal
            - electric
            - hybrid
            - hybridRechargeable
          example: thermal
        carType:
          type: string
          description: Can be used to define the type of the car.
          enum:
            - cabriolet
        currencyCode:
          type: string
          description: |-
            Currency in which the prices are displayed.
            The official ISO 4217 standard which specifies three-letter ("Alpha-3") codes is used.
          example: EUR
          default: EUR
      required:
        - id
        - location
        - carModel
